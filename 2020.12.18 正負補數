```
10010010
```
如果當電腦以 8 bits 來表達負數時.
10010010 代表的數字為何?
(1) signed-magniture
(2) 1's complement
(3) 2's complement

```
(1)signed-magniture

Step 1: 判斷正負 
       讀取數字最左邊的數字,若為1代表負數, 0則代表正數
       
       10010010 => [1]0010010 =>所以代表為負數

Step 2:計算  [大小(magnitude)]
       去掉最左邊的數字 開始運算

       0   0   1   0   0   1   0
              16           2    
    -----------------------------------          
         0010010 => 16 2  => 計算出10進位為 16+2 = 18

Step 3: 完整個計算 => [正負號]  [大小(magnitude)]

         [正負號]  [大小(magnitude)]  => - 18

```

```
(2)1's complement

Step 1: 判斷正負 
       讀取數字最左邊的數字,若為1代表負數, 0則代表正數
       
       10010010 => [1]0010010 => 所以代表為 -負數

Step 2:計算  [大小(magnitude)]

Step 2-1:先執行反相運算(inverse)
         1改成0 , 0改成1
    
       1    0    0    1    0    0    1    0
       0    1    1    0    1    1    0    1
       
        10010010  ==> 01101101
        
Step 2-2: 算出10進位表達的數字 
       
       0   1    1     0   1   1   0    1 
          64   32         8   4        1 
       
       
        01101101 ==>計算出10進位為 64+32+8+4+1 = 109

Step 3: 完整整個計算 ==> [正負號]  [大小(magnitude)]

         [正負號]  [大小(magnitude)]  ===> - 109

Step2-1  計算 大小 先執行反相運算
10010010 + 1 = 10010001 



10010010
-      1
----------
10010001

       
```
```
(3)2's complement

Step 1: 判斷正負 
       讀取數字最左邊的數字,若為1代表負數, 0則代表正數
       
       10010010 => [1]0010010 => 所以代表為 -負數
Step 2:計算  [大小(magnitude)]

Step 2-1:先執行-1 
     10010010
  -         1
   -----------
      10010001
        
        10010010  ==> 10010001
        
Step 2-2: 執行反相運算(inverse)
     1改成0 , 0改成1

         1  0  0  1  0  0  0  1
         0  1  1  0  1  1  1  0
  
        10010001   => 01101110

Step 2-3:  算出10進位表達的數字 

              0   1   1  0  1  1  1  0
                 64  32     8  4  2
                 
        01101110 =>  64  32  8  4  2
        計算出10進位為 64+32+8+4+2 = 110

Step 3: 完整個計算 ==> [正負號]  [大小(magnitude)]

         [正負號]  [大小(magnitude)]  ===> - 110
```
